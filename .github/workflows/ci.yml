name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  SWIFT_VERSION: '6.1'

jobs:
  # ================================
  # Build and Unit Tests
  # ================================
  build-and-test:
    name: Build & Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            swift-version: '6.1'
          - os: macos-latest
            swift-version: '6.1'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Setup Swift on Ubuntu
    - name: Setup Swift (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      uses: swift-actions/setup-swift@v1
      with:
        swift-version: ${{ matrix.swift-version }}

    # macOS comes with Swift pre-installed, but we'll verify the version
    - name: Check Swift version (macOS)
      if: matrix.os == 'macos-latest'
      run: swift --version

    - name: Cache Swift packages
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-swift-${{ hashFiles('Package.swift') }}
        restore-keys: |
          ${{ runner.os }}-swift-

    - name: Build package
      run: swift build --verbose

    - name: Run unit tests (excluding live tests)
      run: |
        swift test --parallel --verbose \
          --skip-test LiveAPIIntegrationTests \
          --skip-test AuthenticationFunctionalTests \
          --skip-test DatabaseServiceFunctionalTests \
          --skip-test EndToEndAPIComplianceTests \
          --skip-test FinalIntegrationTests

  # ================================
  # Swift Package Manager Validation
  # ================================
  spm-validation:
    name: SPM Package Validation
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate Package.swift
      run: swift package dump-package

    - name: Check package dependencies
      run: swift package show-dependencies

    - name: Validate package manifest
      run: swift package describe --type json

  # ================================
  # Code Quality & Analysis
  # ================================
  code-quality:
    name: Code Quality Analysis
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build for analysis
      run: swift build --configuration release

    - name: Check for build warnings
      run: |
        swift build 2>&1 | tee build.log
        if grep -i "warning" build.log; then
          echo "⚠️ Build warnings found"
          exit 0  # Don't fail on warnings, just report them
        fi

    - name: Run SwiftLint (if available)
      continue-on-error: true
      run: |
        if command -v swiftlint &> /dev/null; then
          swiftlint --config .swiftlint.yml || true
        else
          echo "SwiftLint not installed, skipping linting"
        fi

  # ================================
  # Platform Compatibility Tests
  # ================================
  platform-tests:
    name: Platform Tests (${{ matrix.platform }})
    runs-on: macos-latest
    strategy:
      matrix:
        platform: [iOS, macOS, tvOS, watchOS]
        include:
          - platform: iOS
            destination: 'platform=iOS Simulator,name=iPhone 15,OS=latest'
            scheme: 'Discogs'
          - platform: macOS
            destination: 'platform=macOS'
            scheme: 'Discogs'
          - platform: tvOS
            destination: 'platform=tvOS Simulator,name=Apple TV,OS=latest'
            scheme: 'Discogs'
          - platform: watchOS
            destination: 'platform=watchOS Simulator,name=Apple Watch Series 9 (45mm),OS=latest'
            scheme: 'Discogs'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: List available simulators
      run: xcrun simctl list devices available

    - name: Build for ${{ matrix.platform }}
      run: |
        xcodebuild -scheme ${{ matrix.scheme }} \
          -destination "${{ matrix.destination }}" \
          -configuration Debug \
          build-for-testing

  # ================================
  # Integration Tests (Mock)
  # ================================
  integration-tests:
    name: Integration Tests (Mock)
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run mock integration tests
      run: |
        swift test --verbose \
          --filter "DependencyInjectionIntegrationTests" \
          --filter "MockNetworkTests" \
          --filter "ErrorHandlingAndRateLimitingTests"

    - name: Run enhanced compliance tests
      run: |
        swift test --verbose \
          --filter "RateLimitEnhancedTests" \
          --filter "CurrencyValidationTests"

  # ================================
  # Live API Tests (Optional)
  # ================================
  live-api-tests:
    name: Live API Tests
    runs-on: macos-latest
    # Only run on push to main branch or if manually triggered
    if: (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run live API tests
      continue-on-error: true
      run: |
        echo "🚀 Running live API integration tests..."
        # Check for API token availability using a different approach
        TOKEN_SET=false
        if [ -n "${API_TOKEN:-}" ]; then
          TOKEN_SET=true
          export DISCOGS_API_TOKEN="$API_TOKEN"
        fi
        
        if [ "$TOKEN_SET" = "false" ]; then
          echo "⚠️ DISCOGS_API_TOKEN not set in secrets"
          echo "Live API tests will be skipped"
          echo "To enable live tests, add your Discogs API token to repository secrets"
          exit 0
        fi
        
        swift test --verbose --filter "LiveAPIIntegrationTests"
      env:
        API_TOKEN: ${{ secrets.DISCOGS_API_TOKEN || '' }}

    - name: Run functional tests
      continue-on-error: true
      run: |
        echo "🚀 Running functional tests..."
        # Check for API token availability using a different approach
        TOKEN_SET=false
        if [ -n "${API_TOKEN:-}" ]; then
          TOKEN_SET=true
          export DISCOGS_API_TOKEN="$API_TOKEN"
        fi
        
        if [ "$TOKEN_SET" = "false" ]; then
          echo "⚠️ DISCOGS_API_TOKEN not set - skipping functional tests"
          exit 0
        fi
        
        swift test --verbose \
          --filter "AuthenticationFunctionalTests" \
          --filter "DatabaseServiceFunctionalTests"
      env:
        API_TOKEN: ${{ secrets.DISCOGS_API_TOKEN || '' }}

  # ================================
  # Documentation Build & Validation
  # ================================
  documentation:
    name: Documentation Build & Validation
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Cache Swift packages
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-swift-docs-${{ hashFiles('Package.swift') }}
        restore-keys: |
          ${{ runner.os }}-swift-docs-
          ${{ runner.os }}-swift-

    - name: Build documentation with Swift-DocC
      run: |
        echo "🏗️ Building documentation with Swift-DocC..."
        
        # Build the documentation
        swift package generate-documentation \
          --target Discogs \
          --disable-indexing \
          --transform-for-static-hosting \
          --hosting-base-path Discogs \
          --output-path .build/documentation
        
        echo "✅ Documentation built successfully"

    - name: Validate documentation structure
      run: |
        echo "🔍 Validating documentation structure..."
        
        # Check if documentation was generated
        if [ ! -d ".build/documentation" ]; then
          echo "❌ Documentation directory not found"
          exit 1
        fi
        
        # Check for essential files
        if [ ! -f ".build/documentation/index.html" ]; then
          echo "❌ Index.html not found"
          exit 1
        fi
        
        # Check for DocC catalog
        if [ ! -d "Sources/Discogs/Documentation.docc" ]; then
          echo "❌ Documentation.docc catalog not found"
          exit 1
        fi
        
        # List documentation contents
        echo "📁 Documentation contents:"
        find .build/documentation -name "*.html" | head -10
        
        echo "✅ Documentation structure validation passed"

    - name: Check documentation quality
      run: |
        echo "📊 Checking documentation coverage..."
        
        # Count public API elements that should have documentation
        public_items=$(swift-symbolgraph-extract -module-name Discogs -target x86_64-apple-macos10.15 -pretty-print -output-dir .build/symbolgraph 2>/dev/null || echo "0")
        
        echo "📋 Documentation quality metrics:"
        echo "- Documentation catalog: ✅ Present"
        echo "- Generated HTML files: $(find .build/documentation -name "*.html" | wc -l | tr -d ' ') files"
        echo "- Documentation articles: $(find Sources/Discogs/Documentation.docc -name "*.md" | wc -l | tr -d ' ') articles"
        
        echo "✅ Documentation quality check completed"

    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation-${{ github.sha }}
        path: .build/documentation/
        retention-days: 30

    - name: Documentation deployment status
      run: |
        echo "## 📚 Documentation Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Documentation built successfully with Swift-DocC" >> $GITHUB_STEP_SUMMARY
        echo "- 📁 Generated $(find .build/documentation -name "*.html" | wc -l | tr -d ' ') HTML files" >> $GITHUB_STEP_SUMMARY
        echo "- 📖 Includes $(find Sources/Discogs/Documentation.docc -name "*.md" | wc -l | tr -d ' ') documentation articles" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "🚀 **Main branch detected**: Full documentation will be deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
          echo "📝 Visit the [Documentation Workflow](../actions/workflows/documentation.yml) for deployment status" >> $GITHUB_STEP_SUMMARY
        else
          echo "🔍 **Branch build**: Documentation validated but not deployed" >> $GITHUB_STEP_SUMMARY
        fi

  # ================================
  # Example Compilation Tests
  # ================================
  examples:
    name: Example Compilation
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Compile examples
      run: |
        # Test that example files compile
        if [ -d "Examples" ]; then
          for example in Examples/*.swift; do
            if [ -f "$example" ]; then
              echo "Checking compilation of $example"
              swift -typecheck "$example" -I .build/debug/
            fi
          done
        fi

  # ================================
  # Test Scripts Validation
  # ================================
  scripts:
    name: Test Scripts
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Make scripts executable
      run: |
        chmod +x run_live_tests.sh
        chmod +x run_live_only.sh
        chmod +x test_live_only.sh

    - name: Test compilation script
      run: |
        ./test_live_only.sh

    - name: Validate run scripts (dry run)
      run: |
        # Test the scripts can at least parse correctly
        bash -n run_live_tests.sh
        bash -n run_live_only.sh

  # ================================
  # Security & Dependency Audit
  # ================================
  security:
    name: Security Audit
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Audit package dependencies
      run: |
        # Check for any security advisories (if Swift supports this in the future)
        swift package show-dependencies --format json > deps.json
        echo "Dependencies audit completed"
        
    - name: Check for sensitive information
      run: |
        # Basic check for potential secrets in code
        if grep -r -i "token\|password\|secret\|key" --exclude-dir=.git --exclude="*.md" --exclude="ci.yml" . | grep -v "DISCOGS_API_TOKEN"; then
          echo "⚠️ Potential sensitive information found in code"
          echo "Please review the above matches"
        fi

  # ================================
  # Release Readiness
  # ================================
  release-check:
    name: Release Readiness
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main'
    needs: [build-and-test, spm-validation, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check version consistency
      run: |
        # Verify Package.swift version information is consistent
        echo "Checking package version consistency..."
        swift package dump-package | jq .

    - name: Generate release notes
      run: |
        echo "## 🚀 Release Readiness Check Passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Build successful on all platforms" >> $GITHUB_STEP_SUMMARY  
        echo "- ✅ All unit tests passing" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Integration tests passing" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Package validation successful" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Package is ready for release! 🎉" >> $GITHUB_STEP_SUMMARY

  # ================================
  # Summary Report
  # ================================
  summary:
    name: CI Summary
    runs-on: macos-latest
    needs: [build-and-test, spm-validation, code-quality, integration-tests]
    if: always()
    
    steps:
    - name: Generate summary
      run: |
        echo "## 📊 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Build & Test | ${{ needs.build-and-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| SPM Validation | ${{ needs.spm-validation.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality | ${{ needs.code-quality.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.build-and-test.result }}" == "success" ] && [ "${{ needs.spm-validation.result }}" == "success" ]; then
          echo "🎉 **All core checks passed!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Some checks failed - please review**" >> $GITHUB_STEP_SUMMARY
        fi
